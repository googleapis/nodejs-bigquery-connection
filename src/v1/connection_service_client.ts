// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  PaginationCallback,
  GaxCall,
} from 'google-gax';
import * as path from 'path';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import * as gapicConfig from './connection_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Manages external data source connections and credentials.
 * @class
 * @memberof v1
 */
export class ConnectionServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  connectionServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of ConnectionServiceClient.
   *
   * @param {object} [options] - The configuration object. See the subsequent
   *   parameters for more details.
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   */

  constructor(opts?: ClientOptions) {
    // Ensure that options include the service address and port.
    const staticMembers = this.constructor as typeof ConnectionServiceClient;
    const servicePath =
      opts && opts.servicePath
        ? opts.servicePath
        : opts && opts.apiEndpoint
        ? opts.apiEndpoint
        : staticMembers.servicePath;
    const port = opts && opts.port ? opts.port : staticMembers.port;

    if (!opts) {
      opts = {servicePath, port};
    }
    opts.servicePath = opts.servicePath || servicePath;
    opts.port = opts.port || port;

    // users can override the config from client side, like retry codes name.
    // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
    // The way to override client config for Showcase API:
    //
    // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
    // const showcaseClient = new showcaseClient({ projectId, customConfig });
    opts.clientConfig = opts.clientConfig || {};

    // If we're running in browser, it's OK to omit `fallback` since
    // google-gax has `browser` field in its `package.json`.
    // For Electron (which does not respect `browser` field),
    // pass `{fallback: true}` to the ConnectionServiceClient constructor.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof ConnectionServiceClient).scopes;
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(
      __dirname,
      '..',
      '..',
      'protos',
      'protos.json'
    );
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback
        ? // eslint-disable-next-line @typescript-eslint/no-var-requires
          require('../../protos/protos.json')
        : nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      connectionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/connections/{connection}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listConnections: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'connections'
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.bigquery.connection.v1.ConnectionService',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.connectionServiceStub) {
      return this.connectionServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.bigquery.connection.v1.ConnectionService.
    this.connectionServiceStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.bigquery.connection.v1.ConnectionService'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.bigquery.connection.v1
            .ConnectionService,
      this._opts
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const connectionServiceStubMethods = [
      'createConnection',
      'getConnection',
      'listConnections',
      'updateConnection',
      'deleteConnection',
      'getIamPolicy',
      'setIamPolicy',
      'testIamPermissions',
    ];
    for (const methodName of connectionServiceStubMethods) {
      const callPromise = this.connectionServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        this.descriptors.page[methodName] ||
          this.descriptors.stream[methodName] ||
          this.descriptors.longrunning[methodName]
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.connectionServiceStub;
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return 'bigqueryconnection.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   */
  static get apiEndpoint() {
    return 'bigqueryconnection.googleapis.com';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/bigquery',
      'https://www.googleapis.com/auth/cloud-platform',
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  createConnection(
    request: protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection,
      (
        | protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  createConnection(
    request: protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  createConnection(
    request: protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest,
    callback: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Creates a new connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *   Must be in the format `projects/{project_id}/locations/{location_id}`
   * @param {string} [request.connectionId]
   *   Optional. Connection id that should be assigned to the created connection.
   * @param {google.cloud.bigquery.connection.v1.Connection} request.connection
   *   Required. Connection to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Connection]{@link google.cloud.bigquery.connection.v1.Connection}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  createConnection(
    request: protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.bigquery.connection.v1.IConnection,
          | protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection,
      (
        | protos.google.cloud.bigquery.connection.v1.ICreateConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createConnection(request, options, callback);
  }
  getConnection(
    request: protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection,
      (
        | protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getConnection(
    request: protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getConnection(
    request: protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest,
    callback: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns specified connection.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the requested connection, for example:
   *   `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Connection]{@link google.cloud.bigquery.connection.v1.Connection}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getConnection(
    request: protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.bigquery.connection.v1.IConnection,
          | protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection,
      (
        | protos.google.cloud.bigquery.connection.v1.IGetConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getConnection(request, options, callback);
  }
  updateConnection(
    request: protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection,
      (
        | protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  updateConnection(
    request: protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  updateConnection(
    request: protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest,
    callback: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Updates the specified connection. For security reasons, also resets
   * credential if connection properties are in the update field mask.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the connection to update, for example:
   *   `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
   * @param {google.cloud.bigquery.connection.v1.Connection} request.connection
   *   Required. Connection containing the updated fields.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. Update mask for the connection fields to be updated.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Connection]{@link google.cloud.bigquery.connection.v1.Connection}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  updateConnection(
    request: protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.cloud.bigquery.connection.v1.IConnection,
          | protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.bigquery.connection.v1.IConnection,
      | protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection,
      (
        | protos.google.cloud.bigquery.connection.v1.IUpdateConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateConnection(request, options, callback);
  }
  deleteConnection(
    request: protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  deleteConnection(
    request: protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  deleteConnection(
    request: protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest,
    callback: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Deletes connection and associated credential.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. Name of the deleted connection, for example:
   *   `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  deleteConnection(
    request: protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.protobuf.IEmpty,
          | protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.protobuf.IEmpty,
      | protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.protobuf.IEmpty,
      (
        | protos.google.cloud.bigquery.connection.v1.IDeleteConnectionRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      name: request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteConnection(request, options, callback);
  }
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Gets the access control policy for a resource.
   * Returns an empty policy if the resource exists and does not have a policy
   * set.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.GetPolicyOptions} request.options
   *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
   *   `GetIamPolicy`. This field is only used by Cloud IAM.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  getIamPolicy(
    request: protos.google.iam.v1.IGetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.IGetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.getIamPolicy(request, options, callback);
  }
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  >;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    callback: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Sets the access control policy on the specified resource. Replaces any
   * existing policy.
   *
   * Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy is being specified.
   *   See the operation documentation for the appropriate value for this field.
   * @param {google.iam.v1.Policy} request.policy
   *   REQUIRED: The complete policy to be applied to the `resource`. The size of
   *   the policy is limited to a few 10s of KB. An empty policy is a
   *   valid policy but certain Cloud Platform services (such as Projects)
   *   might reject them.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  setIamPolicy(
    request: protos.google.iam.v1.ISetIamPolicyRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.IPolicy,
          protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.IPolicy,
      protos.google.iam.v1.ISetIamPolicyRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.setIamPolicy(request, options, callback);
  }
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  >;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    options: gax.CallOptions,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    callback: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): void;
  /**
   * Returns permissions that a caller has on the specified resource.
   * If the resource does not exist, this will return an empty set of
   * permissions, not a `NOT_FOUND` error.
   *
   * Note: This operation is designed to be used for building permission-aware
   * UIs and command-line tools, not for authorization checking. This operation
   * may "fail open" without warning.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.resource
   *   REQUIRED: The resource for which the policy detail is being requested.
   *   See the operation documentation for the appropriate value for this field.
   * @param {string[]} request.permissions
   *   The set of permissions to check for the `resource`. Permissions with
   *   wildcards (such as '*' or 'storage.*') are not allowed. For more
   *   information see
   *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  testIamPermissions(
    request: protos.google.iam.v1.ITestIamPermissionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | Callback<
          protos.google.iam.v1.ITestIamPermissionsResponse,
          protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.iam.v1.ITestIamPermissionsResponse,
      protos.google.iam.v1.ITestIamPermissionsRequest | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      resource: request.resource || '',
    });
    this.initialize();
    return this.innerApiCalls.testIamPermissions(request, options, callback);
  }

  listConnections(
    request: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
    options?: gax.CallOptions
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection[],
      protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest | null,
      protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse
    ]
  >;
  listConnections(
    request: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
    options: gax.CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
      | protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.connection.v1.IConnection
    >
  ): void;
  listConnections(
    request: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
    callback: PaginationCallback<
      protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
      | protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.connection.v1.IConnection
    >
  ): void;
  /**
   * Returns a list of connections in the given project.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *   Must be in the form: `projects/{project_id}/locations/{location_id}`
   * @param {number} request.pageSize
   *   Required. Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Connection]{@link google.cloud.bigquery.connection.v1.Connection}.
   *   The client library support auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *
   *   When autoPaginate: false is specified through options, the array has three elements.
   *   The first element is Array of [Connection]{@link google.cloud.bigquery.connection.v1.Connection} that corresponds to
   *   the one page received from the API server.
   *   If the second element is not null it contains the request object of type [ListConnectionsRequest]{@link google.cloud.bigquery.connection.v1.ListConnectionsRequest}
   *   that can be used to obtain the next page of the results.
   *   If it is null, the next page does not exist.
   *   The third element contains the raw response received from the API server. Its type is
   *   [ListConnectionsResponse]{@link google.cloud.bigquery.connection.v1.ListConnectionsResponse}.
   *
   *   The promise has a method named "cancel" which cancels the ongoing API call.
   */
  listConnections(
    request: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
    optionsOrCallback?:
      | gax.CallOptions
      | PaginationCallback<
          protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
          | protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse
          | null
          | undefined,
          protos.google.cloud.bigquery.connection.v1.IConnection
        >,
    callback?: PaginationCallback<
      protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
      | protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse
      | null
      | undefined,
      protos.google.cloud.bigquery.connection.v1.IConnection
    >
  ): Promise<
    [
      protos.google.cloud.bigquery.connection.v1.IConnection[],
      protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest | null,
      protos.google.cloud.bigquery.connection.v1.IListConnectionsResponse
    ]
  > | void {
    request = request || {};
    let options: gax.CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as gax.CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listConnections(request, options, callback);
  }

  /**
   * Equivalent to {@link listConnections}, but returns a NodeJS Stream object.
   *
   * This fetches the paged responses for {@link listConnections} continuously
   * and invokes the callback registered for 'data' event for each element in the
   * responses.
   *
   * The returned object has 'end' method when no more elements are required.
   *
   * autoPaginate option will be ignored.
   *
   * @see {@link https://nodejs.org/api/stream.html}
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *   Must be in the form: `projects/{project_id}/locations/{location_id}`
   * @param {number} request.pageSize
   *   Required. Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Connection]{@link google.cloud.bigquery.connection.v1.Connection} on 'data' event.
   */
  listConnectionsStream(
    request?: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
    options?: gax.CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listConnections.createStream(
      this.innerApiCalls.listConnections as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to {@link listConnections}, but returns an iterable object.
   *
   * for-await-of syntax is used with the iterable to recursively get response element on-demand.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. Parent resource name.
   *   Must be in the form: `projects/{project_id}/locations/{location_id}`
   * @param {number} request.pageSize
   *   Required. Page size.
   * @param {string} request.pageToken
   *   Page token.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
   */
  listConnectionsAsync(
    request?: protos.google.cloud.bigquery.connection.v1.IListConnectionsRequest,
    options?: gax.CallOptions
  ): AsyncIterable<protos.google.cloud.bigquery.connection.v1.IConnection> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      parent: request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listConnections.asyncIterate(
      this.innerApiCalls['listConnections'] as GaxCall,
      (request as unknown) as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.bigquery.connection.v1.IConnection>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified connection resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} connection
   * @returns {string} Resource name string.
   */
  connectionPath(project: string, location: string, connection: string) {
    return this.pathTemplates.connectionPathTemplate.render({
      project: project,
      location: location,
      connection: connection,
    });
  }

  /**
   * Parse the project from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .project;
  }

  /**
   * Parse the location from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .location;
  }

  /**
   * Parse the connection from Connection resource.
   *
   * @param {string} connectionName
   *   A fully-qualified path representing Connection resource.
   * @returns {string} A string representing the connection.
   */
  matchConnectionFromConnectionName(connectionName: string) {
    return this.pathTemplates.connectionPathTemplate.match(connectionName)
      .connection;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Terminate the GRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.connectionServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
